[0m[1mdata.local_file.check_backend_config: Reading...[0m[0m
[0m[1mmodule.git_branch.data.external.git_branch: Reading...[0m[0m
[0m[1mdata.local_file.check_backend_config: Read complete after 0s [id=c83dc0f52e0a0b22d4a59fcf3d2572ad942c520e][0m
[0m[1mmodule.git_branch.data.external.git_branch: Read complete after 0s [id=-][0m
[0m[1mmodule.mongodb_atlas.data.mongodbatlas_roles_org_id.organization: Reading...[0m[0m
[0m[1mmodule.mongodb_atlas.data.mongodbatlas_roles_org_id.organization: Read complete after 1s [id=64a22725009439654111bbaf][0m
[0m[1mmodule.mongodb_atlas.mongodbatlas_project.project: Refreshing state... [id=65ab60c359fe5c19c59a9dbe][0m
[0m[1mmodule.cicd_infra.aws_iam_role_policy.codepipeline_policy: Refreshing state... [id=dev-career-hub-dataprovider-codepipeline-role:codepipeline_policy][0m
[0m[1mmodule.cicd_infra.aws_security_group.codebuild_sg: Refreshing state... [id=sg-0998fc217d4bc374f][0m
[0m[1mmodule.cicd_infra.aws_codestarconnections_connection.codepipeline_connection: Refreshing state... [id=arn:aws:codestar-connections:ap-south-1:986069063944:connection/b462ede4-0871-481e-a7c8-cee275998aa1][0m
[0m[1mmodule.cicd_infra.aws_ecr_repository.ecr_repo: Refreshing state... [id=dev-career-hub-dataprovider-ecr][0m
[0m[1mmodule.cicd_infra.aws_iam_role.codebuild_role: Refreshing state... [id=dev-career-hub-dataprovider-codebuild-role][0m
[0m[1mmodule.cicd_infra.aws_iam_role_policy.codebuild_role_policy: Refreshing state... [id=dev-career-hub-dataprovider-codebuild-role:terraform-20240121092813061000000001][0m
[0m[1mmodule.cicd_infra.aws_iam_role.codepipeline_role: Refreshing state... [id=dev-career-hub-dataprovider-codepipeline-role][0m
[0m[1mmodule.cicd_infra.aws_s3_bucket_acl.codebuild_log_bucket_acl: Refreshing state... [id=dev-career-hub-dataprovider-codebuild-log,private][0m
[0m[1mmodule.cicd_infra.aws_s3_bucket.codepipeline_bucket: Refreshing state... [id=dev-career-hub-dataprovider-codepipeline-bucket][0m
[0m[1mmodule.cicd_infra.aws_s3_bucket.codebuild_log_bucket: Refreshing state... [id=dev-career-hub-dataprovider-codebuild-log][0m
[0m[1mmodule.cicd_infra.aws_codepipeline.codepipeline: Refreshing state... [id=dev-career-hub-dataprovider-codepipeline][0m
[0m[1mmodule.cicd_infra.aws_codebuild_project.codebuild_project: Refreshing state... [id=arn:aws:codebuild:ap-south-1:986069063944:project/dev-career-hub-dataprovider-codebuild][0m
[0m[1mmodule.cicd_infra.aws_security_group_rule.allow_all_traffic: Refreshing state... [id=sgrule-2922667764][0m
[0m[1mmodule.dataprocessor_cicd.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.dataprovider_cicd.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.dataprocessor_cicd.data.aws_iam_policy_document.codepipeline_assume_role_doc: Reading...[0m[0m
[0m[1mmodule.dataprocessor_cicd.data.aws_iam_policy_document.codepipeline_assume_role_doc: Read complete after 0s [id=2245101310][0m
[0m[1maws_eip.nat_eips: Refreshing state... [id=eipalloc-0bbe25b754d9baae4][0m
[0m[1mmodule.dataprocessor_cicd.data.aws_iam_policy_document.codebuild_assume_role_policy_doc: Reading...[0m[0m
[0m[1mmodule.dataprocessor_cicd.data.aws_iam_policy_document.codebuild_assume_role_policy_doc: Read complete after 0s [id=1229436035][0m
[0m[1mmodule.dataprocessor_cicd.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.dataprocessor_cicd.data.aws_region.current: Read complete after 0s [id=ap-south-1][0m
[0m[1mmodule.vpc_infra.aws_vpc.vpc: Refreshing state... [id=vpc-06dcdb238d94e715e][0m
[0m[1mmodule.dataprovider_cicd.data.aws_iam_policy_document.codebuild_assume_role_policy_doc: Reading...[0m[0m
[0m[1mmodule.dataprovider_cicd.data.aws_iam_policy_document.codebuild_assume_role_policy_doc: Read complete after 0s [id=1229436035][0m
[0m[1mmodule.dataprovider_cicd.data.aws_region.current: Reading...[0m[0m
[0m[1mmodule.dataprovider_cicd.data.aws_region.current: Read complete after 0s [id=ap-south-1][0m
[0m[1mmodule.dataprovider_cicd.data.aws_iam_policy_document.codepipeline_assume_role_doc: Reading...[0m[0m
[0m[1mmodule.dataprovider_cicd.data.aws_iam_policy_document.codepipeline_assume_role_doc: Read complete after 0s [id=2245101310][0m
[0m[1mdata.aws_availability_zones.available: Reading...[0m[0m
[0m[1mmodule.mongodb_atlas.mongodbatlas_database_user.admin_db_user: Refreshing state... [id=YXV0aF9kYXRhYmFzZV9uYW1l:YWRtaW4=-cHJvamVjdF9pZA==:NjVhYjYwYzM1OWZlNWMxOWM1OWE5ZGJl-dXNlcm5hbWU=:Y2FyZWVyaHViX2RiX2FkbWlu][0m
[0m[1mmodule.mongodb_atlas.mongodbatlas_serverless_instance.mongodb_serverless["dev-career-hub-jobposting"]: Refreshing state... [id=bmFtZQ==:ZGV2LWNhcmVlci1odWItam9icG9zdGluZw==-cHJvamVjdF9pZA==:NjVhYjYwYzM1OWZlNWMxOWM1OWE5ZGJl][0m
[0m[1mmodule.mongodb_atlas.mongodbatlas_serverless_instance.mongodb_serverless["dev-career-hub-log"]: Refreshing state... [id=bmFtZQ==:ZGV2LWNhcmVlci1odWItbG9n-cHJvamVjdF9pZA==:NjVhYjYwYzM1OWZlNWMxOWM1OWE5ZGJl][0m
[0m[1mdata.aws_availability_zones.available: Read complete after 1s [id=ap-south-1][0m
[0m[1mmodule.dataprocessor_cicd.data.aws_caller_identity.current: Read complete after 1s [id=986069063944][0m
[0m[1mmodule.dataprovider_cicd.data.aws_caller_identity.current: Read complete after 1s [id=986069063944][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 1s [id=986069063944][0m
[0m[1mmodule.mongodb_atlas.mongodbatlas_privatelink_endpoint_serverless.privatelink_endpoint["dev-career-hub-jobposting"]: Refreshing state... [id=ZW5kcG9pbnRfaWQ=:NjVhYjkzNzU3MDc3MTY1MTEwMTkyZTJh-aW5zdGFuY2VfbmFtZQ==:ZGV2LWNhcmVlci1odWItam9icG9zdGluZw==-cHJvamVjdF9pZA==:NjVhYjYwYzM1OWZlNWMxOWM1OWE5ZGJl][0m
[0m[1mmodule.mongodb_atlas.mongodbatlas_privatelink_endpoint_serverless.privatelink_endpoint["dev-career-hub-log"]: Refreshing state... [id=ZW5kcG9pbnRfaWQ=:NjVhYjkzNzUwOWRhZmU2OTVmNzYxMjZm-aW5zdGFuY2VfbmFtZQ==:ZGV2LWNhcmVlci1odWItbG9n-cHJvamVjdF9pZA==:NjVhYjYwYzM1OWZlNWMxOWM1OWE5ZGJl][0m
[0m[1mmodule.vpc_infra.aws_internet_gateway.igw: Refreshing state... [id=igw-0ff67f2fe85b31201][0m
[0m[1mmodule.vpc_infra.aws_subnet.aws_public_subnets["public_subnet_2"]: Refreshing state... [id=subnet-05a7f7a0919c9429d][0m
[0m[1mmodule.vpc_infra.aws_subnet.aws_public_subnets["public_subnet_1"]: Refreshing state... [id=subnet-06163f881dacec83f][0m
[0m[1maws_security_group.mongodb_security_group: Refreshing state... [id=sg-0c0da0ce3d9c6a7db][0m
[0m[1mmodule.vpc_infra.aws_route_table.public_route_table: Refreshing state... [id=rtb-06fb03814705ced4d][0m
[0m[1maws_nat_gateway.nat_gateways: Refreshing state... [id=nat-0a66fee563ed01874][0m
[0m[1mmodule.mongodb_atlas.aws_vpc_endpoint.vpc_endpoint["dev-career-hub-log"]: Refreshing state... [id=vpce-0fa37f4c41a17ce66][0m
[0m[1mmodule.mongodb_atlas.aws_vpc_endpoint.vpc_endpoint["dev-career-hub-jobposting"]: Refreshing state... [id=vpce-0254033443e214075][0m
[0m[1mmodule.vpc_infra.aws_route_table_association.public_route_table_association["public_subnet_2"]: Refreshing state... [id=rtbassoc-08f9ce94dd20d0b30][0m
[0m[1mmodule.vpc_infra.aws_route_table_association.public_route_table_association["public_subnet_1"]: Refreshing state... [id=rtbassoc-046292957cc3d7b84][0m
[0m[1mmodule.private_subnet_infra.aws_subnet.aws_private_subnets["public_subnet_1"]: Refreshing state... [id=subnet-0242237036f582ca7][0m
[0m[1mmodule.private_subnet_infra.aws_route_table.private_route_table["public_subnet_1"]: Refreshing state... [id=rtb-0655d95020fe77b5d][0m
[0m[1mmodule.private_subnet_infra.aws_route_table_association.private_route_table_association["public_subnet_1"]: Refreshing state... [id=rtbassoc-0e501b13efb0d6b60][0m
[0m[1mmodule.private_subnet_infra.aws_route.nat_gateway_route["public_subnet_1"]: Refreshing state... [id=r-rtb-0655d95020fe77b5d1080289494][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
  [31m-[0m destroy[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # module.cicd_infra.aws_codebuild_project.codebuild_project[0m will be [1m[31mdestroyed[0m
  # (because aws_codebuild_project.codebuild_project is not in configuration)
[0m  [31m-[0m[0m resource "aws_codebuild_project" "codebuild_project" {
      [31m-[0m[0m arn                    = "arn:aws:codebuild:ap-south-1:986069063944:project/dev-career-hub-dataprovider-codebuild" [90m-> null[0m[0m
      [31m-[0m[0m badge_enabled          = false [90m-> null[0m[0m
      [31m-[0m[0m build_timeout          = 30 [90m-> null[0m[0m
      [31m-[0m[0m concurrent_build_limit = 0 [90m-> null[0m[0m
      [31m-[0m[0m description            = "CodeBuild for dev-career-hub-dataprovider" [90m-> null[0m[0m
      [31m-[0m[0m encryption_key         = "arn:aws:kms:ap-south-1:986069063944:alias/aws/s3" [90m-> null[0m[0m
      [31m-[0m[0m id                     = "arn:aws:codebuild:ap-south-1:986069063944:project/dev-career-hub-dataprovider-codebuild" [90m-> null[0m[0m
      [31m-[0m[0m name                   = "dev-career-hub-dataprovider-codebuild" [90m-> null[0m[0m
      [31m-[0m[0m project_visibility     = "PRIVATE" [90m-> null[0m[0m
      [31m-[0m[0m queued_timeout         = 480 [90m-> null[0m[0m
      [31m-[0m[0m service_role           = "arn:aws:iam::986069063944:role/dev-career-hub-dataprovider-codebuild-role" [90m-> null[0m[0m
      [31m-[0m[0m tags                   = {} [90m-> null[0m[0m
      [31m-[0m[0m tags_all               = {
          [31m-[0m[0m "env" = "dev"
        } [90m-> null[0m[0m

      [31m-[0m[0m artifacts {
          [31m-[0m[0m encryption_disabled    = false [90m-> null[0m[0m
          [31m-[0m[0m name                   = "dev-career-hub-dataprovider-codebuild" [90m-> null[0m[0m
          [31m-[0m[0m override_artifact_name = false [90m-> null[0m[0m
          [31m-[0m[0m packaging              = "NONE" [90m-> null[0m[0m
          [31m-[0m[0m type                   = "CODEPIPELINE" [90m-> null[0m[0m
        }

      [31m-[0m[0m cache {
          [31m-[0m[0m location = "dev-career-hub-dataprovider-codebuild-log" [90m-> null[0m[0m
          [31m-[0m[0m modes    = [] [90m-> null[0m[0m
          [31m-[0m[0m type     = "S3" [90m-> null[0m[0m
        }

      [31m-[0m[0m environment {
          [31m-[0m[0m compute_type                = "BUILD_GENERAL1_SMALL" [90m-> null[0m[0m
          [31m-[0m[0m image                       = "aws/codebuild/amazonlinux2-x86_64-standard:4.0" [90m-> null[0m[0m
          [31m-[0m[0m image_pull_credentials_type = "CODEBUILD" [90m-> null[0m[0m
          [31m-[0m[0m privileged_mode             = true [90m-> null[0m[0m
          [31m-[0m[0m type                        = "LINUX_CONTAINER" [90m-> null[0m[0m
        }

      [31m-[0m[0m logs_config {
          [31m-[0m[0m cloudwatch_logs {
              [31m-[0m[0m group_name  = "dev-career-hub-dataprovider-lg" [90m-> null[0m[0m
              [31m-[0m[0m status      = "ENABLED" [90m-> null[0m[0m
              [31m-[0m[0m stream_name = "dev-career-hub-dataprovider-ls" [90m-> null[0m[0m
            }
          [31m-[0m[0m s3_logs {
              [31m-[0m[0m encryption_disabled = false [90m-> null[0m[0m
              [31m-[0m[0m location            = "dev-career-hub-dataprovider-codebuild-log/build-log" [90m-> null[0m[0m
              [31m-[0m[0m status              = "ENABLED" [90m-> null[0m[0m
            }
        }

      [31m-[0m[0m source {
          [31m-[0m[0m buildspec           = <<-EOT
                version: 0.2
                
                phases:
                  pre_build:
                    commands:
                      - echo Logging in to Amazon ECR...
                      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 986069063944.dkr.ecr.ap-south-1.amazonaws.com
                  build:
                    commands:
                      - echo Build started on `date`
                      - echo Building the Docker image...
                      - docker build -t dev-career-hub-dataprovider-ecr:latest .
                      - docker tag dev-career-hub-dataprovider-ecr:latest 986069063944.dkr.ecr.ap-south-1.amazonaws.com/dev-career-hub-dataprovider-ecr:latest
                
                  post_build:
                    commands:
                      - echo Build completed on `date`
                      - echo Pushing the Docker image...
                      - docker push 986069063944.dkr.ecr.ap-south-1.amazonaws.com/dev-career-hub-dataprovider-ecr:latest
            EOT [90m-> null[0m[0m
          [31m-[0m[0m git_clone_depth     = 0 [90m-> null[0m[0m
          [31m-[0m[0m insecure_ssl        = false [90m-> null[0m[0m
          [31m-[0m[0m report_build_status = false [90m-> null[0m[0m
          [31m-[0m[0m type                = "CODEPIPELINE" [90m-> null[0m[0m
        }

      [31m-[0m[0m vpc_config {
          [31m-[0m[0m security_group_ids = [
              [31m-[0m[0m "sg-0998fc217d4bc374f",
            ] [90m-> null[0m[0m
          [31m-[0m[0m subnets            = [
              [31m-[0m[0m "subnet-0242237036f582ca7",
            ] [90m-> null[0m[0m
          [31m-[0m[0m vpc_id             = "vpc-06dcdb238d94e715e" [90m-> null[0m[0m
        }
    }

[1m  # module.cicd_infra.aws_codepipeline.codepipeline[0m will be [1m[31mdestroyed[0m
  # (because aws_codepipeline.codepipeline is not in configuration)
[0m  [31m-[0m[0m resource "aws_codepipeline" "codepipeline" {
      [31m-[0m[0m arn      = "arn:aws:codepipeline:ap-south-1:986069063944:dev-career-hub-dataprovider-codepipeline" [90m-> null[0m[0m
      [31m-[0m[0m id       = "dev-career-hub-dataprovider-codepipeline" [90m-> null[0m[0m
      [31m-[0m[0m name     = "dev-career-hub-dataprovider-codepipeline" [90m-> null[0m[0m
      [31m-[0m[0m role_arn = "arn:aws:iam::986069063944:role/dev-career-hub-dataprovider-codepipeline-role" [90m-> null[0m[0m
      [31m-[0m[0m tags     = {} [90m-> null[0m[0m
      [31m-[0m[0m tags_all = {
          [31m-[0m[0m "env" = "dev"
        } [90m-> null[0m[0m

      [31m-[0m[0m artifact_store {
          [31m-[0m[0m location = "dev-career-hub-dataprovider-codepipeline-bucket" [90m-> null[0m[0m
          [31m-[0m[0m type     = "S3" [90m-> null[0m[0m
        }

      [31m-[0m[0m stage {
          [31m-[0m[0m name = "Source" [90m-> null[0m[0m

          [31m-[0m[0m action {
              [31m-[0m[0m category         = "Source" [90m-> null[0m[0m
              [31m-[0m[0m configuration    = {
                  [31m-[0m[0m "BranchName"       = "dev"
                  [31m-[0m[0m "ConnectionArn"    = "arn:aws:codestar-connections:ap-south-1:986069063944:connection/b462ede4-0871-481e-a7c8-cee275998aa1"
                  [31m-[0m[0m "FullRepositoryId" = "jae2274/Careerhub-dataProvider"
                } [90m-> null[0m[0m
              [31m-[0m[0m input_artifacts  = [] [90m-> null[0m[0m
              [31m-[0m[0m name             = "Source" [90m-> null[0m[0m
              [31m-[0m[0m output_artifacts = [
                  [31m-[0m[0m "source_output",
                ] [90m-> null[0m[0m
              [31m-[0m[0m owner            = "AWS" [90m-> null[0m[0m
              [31m-[0m[0m provider         = "CodeStarSourceConnection" [90m-> null[0m[0m
              [31m-[0m[0m run_order        = 1 [90m-> null[0m[0m
              [31m-[0m[0m version          = "1" [90m-> null[0m[0m
            }
        }
      [31m-[0m[0m stage {
          [31m-[0m[0m name = "Build" [90m-> null[0m[0m

          [31m-[0m[0m action {
              [31m-[0m[0m category         = "Build" [90m-> null[0m[0m
              [31m-[0m[0m configuration    = {
                  [31m-[0m[0m "ProjectName" = "dev-career-hub-dataprovider-codebuild"
                } [90m-> null[0m[0m
              [31m-[0m[0m input_artifacts  = [
                  [31m-[0m[0m "source_output",
                ] [90m-> null[0m[0m
              [31m-[0m[0m name             = "Build" [90m-> null[0m[0m
              [31m-[0m[0m output_artifacts = [
                  [31m-[0m[0m "build_output",
                ] [90m-> null[0m[0m
              [31m-[0m[0m owner            = "AWS" [90m-> null[0m[0m
              [31m-[0m[0m provider         = "CodeBuild" [90m-> null[0m[0m
              [31m-[0m[0m run_order        = 1 [90m-> null[0m[0m
              [31m-[0m[0m version          = "1" [90m-> null[0m[0m
            }
        }
    }

[1m  # module.cicd_infra.aws_codestarconnections_connection.codepipeline_connection[0m will be [1m[31mdestroyed[0m
  # (because aws_codestarconnections_connection.codepipeline_connection is not in configuration)
[0m  [31m-[0m[0m resource "aws_codestarconnections_connection" "codepipeline_connection" {
      [31m-[0m[0m arn               = "arn:aws:codestar-connections:ap-south-1:986069063944:connection/b462ede4-0871-481e-a7c8-cee275998aa1" [90m-> null[0m[0m
      [31m-[0m[0m connection_status = "AVAILABLE" [90m-> null[0m[0m
      [31m-[0m[0m id                = "arn:aws:codestar-connections:ap-south-1:986069063944:connection/b462ede4-0871-481e-a7c8-cee275998aa1" [90m-> null[0m[0m
      [31m-[0m[0m name              = "dev-career-hub-dataprovider-conn" [90m-> null[0m[0m
      [31m-[0m[0m provider_type     = "GitHub" [90m-> null[0m[0m
      [31m-[0m[0m tags              = {} [90m-> null[0m[0m
      [31m-[0m[0m tags_all          = {
          [31m-[0m[0m "env" = "dev"
        } [90m-> null[0m[0m
    }

[1m  # module.cicd_infra.aws_ecr_repository.ecr_repo[0m will be [1m[31mdestroyed[0m
  # (because aws_ecr_repository.ecr_repo is not in configuration)
[0m  [31m-[0m[0m resource "aws_ecr_repository" "ecr_repo" {
      [31m-[0m[0m arn                  = "arn:aws:ecr:ap-south-1:986069063944:repository/dev-career-hub-dataprovider-ecr" [90m-> null[0m[0m
      [31m-[0m[0m id                   = "dev-career-hub-dataprovider-ecr" [90m-> null[0m[0m
      [31m-[0m[0m image_tag_mutability = "MUTABLE" [90m-> null[0m[0m
      [31m-[0m[0m name                 = "dev-career-hub-dataprovider-ecr" [90m-> null[0m[0m
      [31m-[0m[0m registry_id          = "986069063944" [90m-> null[0m[0m
      [31m-[0m[0m repository_url       = "986069063944.dkr.ecr.ap-south-1.amazonaws.com/dev-career-hub-dataprovider-ecr" [90m-> null[0m[0m
      [31m-[0m[0m tags                 = {} [90m-> null[0m[0m
      [31m-[0m[0m tags_all             = {
          [31m-[0m[0m "env" = "dev"
        } [90m-> null[0m[0m

      [31m-[0m[0m encryption_configuration {
          [31m-[0m[0m encryption_type = "AES256" [90m-> null[0m[0m
        }

      [31m-[0m[0m image_scanning_configuration {
          [31m-[0m[0m scan_on_push = false [90m-> null[0m[0m
        }
    }

[1m  # module.cicd_infra.aws_iam_role.codebuild_role[0m will be [1m[31mdestroyed[0m
  # (because aws_iam_role.codebuild_role is not in configuration)
[0m  [31m-[0m[0m resource "aws_iam_role" "codebuild_role" {
      [31m-[0m[0m arn                   = "arn:aws:iam::986069063944:role/dev-career-hub-dataprovider-codebuild-role" [90m-> null[0m[0m
      [31m-[0m[0m assume_role_policy    = jsonencode(
            {
              [31m-[0m[0m Statement = [
                  [31m-[0m[0m {
                      [31m-[0m[0m Action    = "sts:AssumeRole"
                      [31m-[0m[0m Effect    = "Allow"
                      [31m-[0m[0m Principal = {
                          [31m-[0m[0m Service = "codebuild.amazonaws.com"
                        }
                    },
                ]
              [31m-[0m[0m Version   = "2012-10-17"
            }
        ) [90m-> null[0m[0m
      [31m-[0m[0m create_date           = "2024-01-21T09:28:12Z" [90m-> null[0m[0m
      [31m-[0m[0m force_detach_policies = false [90m-> null[0m[0m
      [31m-[0m[0m id                    = "dev-career-hub-dataprovider-codebuild-role" [90m-> null[0m[0m
      [31m-[0m[0m managed_policy_arns   = [] [90m-> null[0m[0m
      [31m-[0m[0m max_session_duration  = 3600 [90m-> null[0m[0m
      [31m-[0m[0m name                  = "dev-career-hub-dataprovider-codebuild-role" [90m-> null[0m[0m
      [31m-[0m[0m path                  = "/" [90m-> null[0m[0m
      [31m-[0m[0m tags                  = {} [90m-> null[0m[0m
      [31m-[0m[0m tags_all              = {
          [31m-[0m[0m "env" = "dev"
        } [90m-> null[0m[0m
      [31m-[0m[0m unique_id             = "AROA6LFSL3EEBC6EVVHID" [90m-> null[0m[0m

      [31m-[0m[0m inline_policy {
          [31m-[0m[0m name   = "terraform-20240121092813061000000001" [90m-> null[0m[0m
          [31m-[0m[0m policy = jsonencode(
                {
                  [31m-[0m[0m Statement = [
                      [31m-[0m[0m {
                          [31m-[0m[0m Action   = [
                              [31m-[0m[0m "logs:PutLogEvents",
                              [31m-[0m[0m "logs:CreateLogStream",
                              [31m-[0m[0m "logs:CreateLogGroup",
                            ]
                          [31m-[0m[0m Effect   = "Allow"
                          [31m-[0m[0m Resource = "*"
                        },
                      [31m-[0m[0m {
                          [31m-[0m[0m Action   = [
                              [31m-[0m[0m "ec2:DescribeVpcs",
                              [31m-[0m[0m "ec2:DescribeSubnets",
                              [31m-[0m[0m "ec2:DescribeSecurityGroups",
                              [31m-[0m[0m "ec2:DescribeNetworkInterfaces",
                              [31m-[0m[0m "ec2:DescribeDhcpOptions",
                              [31m-[0m[0m "ec2:DeleteNetworkInterface",
                              [31m-[0m[0m "ec2:CreateNetworkInterface",
                            ]
                          [31m-[0m[0m Effect   = "Allow"
                          [31m-[0m[0m Resource = "*"
                        },
                      [31m-[0m[0m {
                          [31m-[0m[0m Action    = "ec2:CreateNetworkInterfacePermission"
                          [31m-[0m[0m Condition = {
                              [31m-[0m[0m ArnEquals    = {
                                  [31m-[0m[0m "ec2:Subnet" = "arn:aws:ec2:ap-south-1:986069063944:subnet/subnet-0242237036f582ca7"
                                }
                              [31m-[0m[0m StringEquals = {
                                  [31m-[0m[0m "ec2:AuthorizedService" = "codebuild.amazonaws.com"
                                }
                            }
                          [31m-[0m[0m Effect    = "Allow"
                          [31m-[0m[0m Resource  = "arn:aws:ec2:*:*:network-interface/*"
                        },
                      [31m-[0m[0m {
                          [31m-[0m[0m Action   = [
                              [31m-[0m[0m "ecr:UploadLayerPart",
                              [31m-[0m[0m "ecr:PutImage",
                              [31m-[0m[0m "ecr:InitiateLayerUpload",
                              [31m-[0m[0m "ecr:GetAuthorizationToken",
                              [31m-[0m[0m "ecr:CompleteLayerUpload",
                              [31m-[0m[0m "ecr:BatchCheckLayerAvailability",
                            ]
                          [31m-[0m[0m Effect   = "Allow"
                          [31m-[0m[0m Resource = "*"
                        },
                      [31m-[0m[0m {
                          [31m-[0m[0m Action   = "s3:*"
                          [31m-[0m[0m Effect   = "Allow"
                          [31m-[0m[0m Resource = [
                              [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codebuild-log/*",
                              [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codebuild-log",
                            ]
                        },
                      [31m-[0m[0m {
                          [31m-[0m[0m Action   = "s3:*"
                          [31m-[0m[0m Effect   = "Allow"
                          [31m-[0m[0m Resource = [
                              [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codepipeline-bucket/*",
                              [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codepipeline-bucket",
                            ]
                        },
                    ]
                  [31m-[0m[0m Version   = "2012-10-17"
                }
            ) [90m-> null[0m[0m
        }
    }

[1m  # module.cicd_infra.aws_iam_role.codepipeline_role[0m will be [1m[31mdestroyed[0m
  # (because aws_iam_role.codepipeline_role is not in configuration)
[0m  [31m-[0m[0m resource "aws_iam_role" "codepipeline_role" {
      [31m-[0m[0m arn                   = "arn:aws:iam::986069063944:role/dev-career-hub-dataprovider-codepipeline-role" [90m-> null[0m[0m
      [31m-[0m[0m assume_role_policy    = jsonencode(
            {
              [31m-[0m[0m Statement = [
                  [31m-[0m[0m {
                      [31m-[0m[0m Action    = "sts:AssumeRole"
                      [31m-[0m[0m Effect    = "Allow"
                      [31m-[0m[0m Principal = {
                          [31m-[0m[0m Service = "codepipeline.amazonaws.com"
                        }
                    },
                ]
              [31m-[0m[0m Version   = "2012-10-17"
            }
        ) [90m-> null[0m[0m
      [31m-[0m[0m create_date           = "2024-01-21T09:28:12Z" [90m-> null[0m[0m
      [31m-[0m[0m force_detach_policies = false [90m-> null[0m[0m
      [31m-[0m[0m id                    = "dev-career-hub-dataprovider-codepipeline-role" [90m-> null[0m[0m
      [31m-[0m[0m managed_policy_arns   = [] [90m-> null[0m[0m
      [31m-[0m[0m max_session_duration  = 3600 [90m-> null[0m[0m
      [31m-[0m[0m name                  = "dev-career-hub-dataprovider-codepipeline-role" [90m-> null[0m[0m
      [31m-[0m[0m path                  = "/" [90m-> null[0m[0m
      [31m-[0m[0m tags                  = {} [90m-> null[0m[0m
      [31m-[0m[0m tags_all              = {
          [31m-[0m[0m "env" = "dev"
        } [90m-> null[0m[0m
      [31m-[0m[0m unique_id             = "AROA6LFSL3EELQBVC2BV3" [90m-> null[0m[0m

      [31m-[0m[0m inline_policy {
          [31m-[0m[0m name   = "codepipeline_policy" [90m-> null[0m[0m
          [31m-[0m[0m policy = jsonencode(
                {
                  [31m-[0m[0m Statement = [
                      [31m-[0m[0m {
                          [31m-[0m[0m Action   = "codestar-connections:UseConnection"
                          [31m-[0m[0m Effect   = "Allow"
                          [31m-[0m[0m Resource = "arn:aws:codestar-connections:ap-south-1:986069063944:connection/b462ede4-0871-481e-a7c8-cee275998aa1"
                        },
                      [31m-[0m[0m {
                          [31m-[0m[0m Action   = [
                              [31m-[0m[0m "codebuild:StartBuild",
                              [31m-[0m[0m "codebuild:BatchGetBuilds",
                            ]
                          [31m-[0m[0m Effect   = "Allow"
                          [31m-[0m[0m Resource = "*"
                        },
                      [31m-[0m[0m {
                          [31m-[0m[0m Action   = [
                              [31m-[0m[0m "s3:PutObjectAcl",
                              [31m-[0m[0m "s3:PutObject",
                              [31m-[0m[0m "s3:GetObjectVersion",
                              [31m-[0m[0m "s3:GetObject",
                              [31m-[0m[0m "s3:GetBucketVersioning",
                            ]
                          [31m-[0m[0m Effect   = "Allow"
                          [31m-[0m[0m Resource = [
                              [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codepipeline-bucket/*",
                              [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codepipeline-bucket",
                            ]
                        },
                    ]
                  [31m-[0m[0m Version   = "2012-10-17"
                }
            ) [90m-> null[0m[0m
        }
    }

[1m  # module.cicd_infra.aws_iam_role_policy.codebuild_role_policy[0m will be [1m[31mdestroyed[0m
  # (because aws_iam_role_policy.codebuild_role_policy is not in configuration)
[0m  [31m-[0m[0m resource "aws_iam_role_policy" "codebuild_role_policy" {
      [31m-[0m[0m id     = "dev-career-hub-dataprovider-codebuild-role:terraform-20240121092813061000000001" [90m-> null[0m[0m
      [31m-[0m[0m name   = "terraform-20240121092813061000000001" [90m-> null[0m[0m
      [31m-[0m[0m policy = jsonencode(
            {
              [31m-[0m[0m Statement = [
                  [31m-[0m[0m {
                      [31m-[0m[0m Action   = [
                          [31m-[0m[0m "logs:PutLogEvents",
                          [31m-[0m[0m "logs:CreateLogStream",
                          [31m-[0m[0m "logs:CreateLogGroup",
                        ]
                      [31m-[0m[0m Effect   = "Allow"
                      [31m-[0m[0m Resource = "*"
                    },
                  [31m-[0m[0m {
                      [31m-[0m[0m Action   = [
                          [31m-[0m[0m "ec2:DescribeVpcs",
                          [31m-[0m[0m "ec2:DescribeSubnets",
                          [31m-[0m[0m "ec2:DescribeSecurityGroups",
                          [31m-[0m[0m "ec2:DescribeNetworkInterfaces",
                          [31m-[0m[0m "ec2:DescribeDhcpOptions",
                          [31m-[0m[0m "ec2:DeleteNetworkInterface",
                          [31m-[0m[0m "ec2:CreateNetworkInterface",
                        ]
                      [31m-[0m[0m Effect   = "Allow"
                      [31m-[0m[0m Resource = "*"
                    },
                  [31m-[0m[0m {
                      [31m-[0m[0m Action    = "ec2:CreateNetworkInterfacePermission"
                      [31m-[0m[0m Condition = {
                          [31m-[0m[0m ArnEquals    = {
                              [31m-[0m[0m "ec2:Subnet" = "arn:aws:ec2:ap-south-1:986069063944:subnet/subnet-0242237036f582ca7"
                            }
                          [31m-[0m[0m StringEquals = {
                              [31m-[0m[0m "ec2:AuthorizedService" = "codebuild.amazonaws.com"
                            }
                        }
                      [31m-[0m[0m Effect    = "Allow"
                      [31m-[0m[0m Resource  = "arn:aws:ec2:*:*:network-interface/*"
                    },
                  [31m-[0m[0m {
                      [31m-[0m[0m Action   = [
                          [31m-[0m[0m "ecr:UploadLayerPart",
                          [31m-[0m[0m "ecr:PutImage",
                          [31m-[0m[0m "ecr:InitiateLayerUpload",
                          [31m-[0m[0m "ecr:GetAuthorizationToken",
                          [31m-[0m[0m "ecr:CompleteLayerUpload",
                          [31m-[0m[0m "ecr:BatchCheckLayerAvailability",
                        ]
                      [31m-[0m[0m Effect   = "Allow"
                      [31m-[0m[0m Resource = "*"
                    },
                  [31m-[0m[0m {
                      [31m-[0m[0m Action   = "s3:*"
                      [31m-[0m[0m Effect   = "Allow"
                      [31m-[0m[0m Resource = [
                          [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codebuild-log/*",
                          [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codebuild-log",
                        ]
                    },
                  [31m-[0m[0m {
                      [31m-[0m[0m Action   = "s3:*"
                      [31m-[0m[0m Effect   = "Allow"
                      [31m-[0m[0m Resource = [
                          [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codepipeline-bucket/*",
                          [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codepipeline-bucket",
                        ]
                    },
                ]
              [31m-[0m[0m Version   = "2012-10-17"
            }
        ) [90m-> null[0m[0m
      [31m-[0m[0m role   = "dev-career-hub-dataprovider-codebuild-role" [90m-> null[0m[0m
    }

[1m  # module.cicd_infra.aws_iam_role_policy.codepipeline_policy[0m will be [1m[31mdestroyed[0m
  # (because aws_iam_role_policy.codepipeline_policy is not in configuration)
[0m  [31m-[0m[0m resource "aws_iam_role_policy" "codepipeline_policy" {
      [31m-[0m[0m id     = "dev-career-hub-dataprovider-codepipeline-role:codepipeline_policy" [90m-> null[0m[0m
      [31m-[0m[0m name   = "codepipeline_policy" [90m-> null[0m[0m
      [31m-[0m[0m policy = jsonencode(
            {
              [31m-[0m[0m Statement = [
                  [31m-[0m[0m {
                      [31m-[0m[0m Action   = "codestar-connections:UseConnection"
                      [31m-[0m[0m Effect   = "Allow"
                      [31m-[0m[0m Resource = "arn:aws:codestar-connections:ap-south-1:986069063944:connection/b462ede4-0871-481e-a7c8-cee275998aa1"
                    },
                  [31m-[0m[0m {
                      [31m-[0m[0m Action   = [
                          [31m-[0m[0m "codebuild:StartBuild",
                          [31m-[0m[0m "codebuild:BatchGetBuilds",
                        ]
                      [31m-[0m[0m Effect   = "Allow"
                      [31m-[0m[0m Resource = "*"
                    },
                  [31m-[0m[0m {
                      [31m-[0m[0m Action   = [
                          [31m-[0m[0m "s3:PutObjectAcl",
                          [31m-[0m[0m "s3:PutObject",
                          [31m-[0m[0m "s3:GetObjectVersion",
                          [31m-[0m[0m "s3:GetObject",
                          [31m-[0m[0m "s3:GetBucketVersioning",
                        ]
                      [31m-[0m[0m Effect   = "Allow"
                      [31m-[0m[0m Resource = [
                          [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codepipeline-bucket/*",
                          [31m-[0m[0m "arn:aws:s3:::dev-career-hub-dataprovider-codepipeline-bucket",
                        ]
                    },
                ]
              [31m-[0m[0m Version   = "2012-10-17"
            }
        ) [90m-> null[0m[0m
      [31m-[0m[0m role   = "dev-career-hub-dataprovider-codepipeline-role" [90m-> null[0m[0m
    }

[1m  # module.cicd_infra.aws_s3_bucket.codebuild_log_bucket[0m will be [1m[31mdestroyed[0m
  # (because aws_s3_bucket.codebuild_log_bucket is not in configuration)
[0m  [31m-[0m[0m resource "aws_s3_bucket" "codebuild_log_bucket" {
      [31m-[0m[0m arn                         = "arn:aws:s3:::dev-career-hub-dataprovider-codebuild-log" [90m-> null[0m[0m
      [31m-[0m[0m bucket                      = "dev-career-hub-dataprovider-codebuild-log" [90m-> null[0m[0m
      [31m-[0m[0m bucket_domain_name          = "dev-career-hub-dataprovider-codebuild-log.s3.amazonaws.com" [90m-> null[0m[0m
      [31m-[0m[0m bucket_regional_domain_name = "dev-career-hub-dataprovider-codebuild-log.s3.ap-south-1.amazonaws.com" [90m-> null[0m[0m
      [31m-[0m[0m force_destroy               = false [90m-> null[0m[0m
      [31m-[0m[0m hosted_zone_id              = "Z11RGJOFQNVJUP" [90m-> null[0m[0m
      [31m-[0m[0m id                          = "dev-career-hub-dataprovider-codebuild-log" [90m-> null[0m[0m
      [31m-[0m[0m object_lock_enabled         = false [90m-> null[0m[0m
      [31m-[0m[0m region                      = "ap-south-1" [90m-> null[0m[0m
      [31m-[0m[0m request_payer               = "BucketOwner" [90m-> null[0m[0m
      [31m-[0m[0m tags                        = {} [90m-> null[0m[0m
      [31m-[0m[0m tags_all                    = {
          [31m-[0m[0m "env" = "dev"
        } [90m-> null[0m[0m

      [31m-[0m[0m grant {
          [31m-[0m[0m id          = "d773a14d2415344921f79724694cdc782c74253fc7f482a2f561ac0b3686830b" [90m-> null[0m[0m
          [31m-[0m[0m permissions = [
              [31m-[0m[0m "FULL_CONTROL",
            ] [90m-> null[0m[0m
          [31m-[0m[0m type        = "CanonicalUser" [90m-> null[0m[0m
        }

      [31m-[0m[0m server_side_encryption_configuration {
          [31m-[0m[0m rule {
              [31m-[0m[0m bucket_key_enabled = false [90m-> null[0m[0m

              [31m-[0m[0m apply_server_side_encryption_by_default {
                  [31m-[0m[0m sse_algorithm = "AES256" [90m-> null[0m[0m
                }
            }
        }

      [31m-[0m[0m versioning {
          [31m-[0m[0m enabled    = false [90m-> null[0m[0m
          [31m-[0m[0m mfa_delete = false [90m-> null[0m[0m
        }
    }

[1m  # module.cicd_infra.aws_s3_bucket.codepipeline_bucket[0m will be [1m[31mdestroyed[0m
  # (because aws_s3_bucket.codepipeline_bucket is not in configuration)
[0m  [31m-[0m[0m resource "aws_s3_bucket" "codepipeline_bucket" {
      [31m-[0m[0m arn                         = "arn:aws:s3:::dev-career-hub-dataprovider-codepipeline-bucket" [90m-> null[0m[0m
      [31m-[0m[0m bucket                      = "dev-career-hub-dataprovider-codepipeline-bucket" [90m-> null[0m[0m
      [31m-[0m[0m bucket_domain_name          = "dev-career-hub-dataprovider-codepipeline-bucket.s3.amazonaws.com" [90m-> null[0m[0m
      [31m-[0m[0m bucket_regional_domain_name = "dev-career-hub-dataprovider-codepipeline-bucket.s3.ap-south-1.amazonaws.com" [90m-> null[0m[0m
      [31m-[0m[0m force_destroy               = false [90m-> null[0m[0m
      [31m-[0m[0m hosted_zone_id              = "Z11RGJOFQNVJUP" [90m-> null[0m[0m
      [31m-[0m[0m id                          = "dev-career-hub-dataprovider-codepipeline-bucket" [90m-> null[0m[0m
      [31m-[0m[0m object_lock_enabled         = false [90m-> null[0m[0m
      [31m-[0m[0m region                      = "ap-south-1" [90m-> null[0m[0m
      [31m-[0m[0m request_payer               = "BucketOwner" [90m-> null[0m[0m
      [31m-[0m[0m tags                        = {} [90m-> null[0m[0m
      [31m-[0m[0m tags_all                    = {
          [31m-[0m[0m "env" = "dev"
        } [90m-> null[0m[0m

      [31m-[0m[0m grant {
          [31m-[0m[0m permissions = [
              [31m-[0m[0m "READ",
              [31m-[0m[0m "WRITE",
            ] [90m-> null[0m[0m
          [31m-[0m[0m type        = "Group" [90m-> null[0m[0m
          [31m-[0m[0m uri         = "http://acs.amazonaws.com/groups/global/AllUsers" [90m-> null[0m[0m
        }
      [31m-[0m[0m grant {
          [31m-[0m[0m id          = "d773a14d2415344921f79724694cdc782c74253fc7f482a2f561ac0b3686830b" [90m-> null[0m[0m
          [31m-[0m[0m permissions = [
              [31m-[0m[0m "FULL_CONTROL",
            ] [90m-> null[0m[0m
          [31m-[0m[0m type        = "CanonicalUser" [90m-> null[0m[0m
        }

      [31m-[0m[0m server_side_encryption_configuration {
          [31m-[0m[0m rule {
              [31m-[0m[0m bucket_key_enabled = false [90m-> null[0m[0m

              [31m-[0m[0m apply_server_side_encryption_by_default {
                  [31m-[0m[0m sse_algorithm = "AES256" [90m-> null[0m[0m
                }
            }
        }

      [31m-[0m[0m versioning {
          [31m-[0m[0m enabled    = false [90m-> null[0m[0m
          [31m-[0m[0m mfa_delete = false [90m-> null[0m[0m
        }
    }

[1m  # module.cicd_infra.aws_s3_bucket_acl.codebuild_log_bucket_acl[0m will be [1m[31mdestroyed[0m
  # (because aws_s3_bucket_acl.codebuild_log_bucket_acl is not in configuration)
[0m  [31m-[0m[0m resource "aws_s3_bucket_acl" "codebuild_log_bucket_acl" {
      [31m-[0m[0m acl    = "private" [90m-> null[0m[0m
      [31m-[0m[0m bucket = "dev-career-hub-dataprovider-codebuild-log" [90m-> null[0m[0m
      [31m-[0m[0m id     = "dev-career-hub-dataprovider-codebuild-log,private" [90m-> null[0m[0m

      [31m-[0m[0m access_control_policy {
          [31m-[0m[0m grant {
              [31m-[0m[0m permission = "FULL_CONTROL" [90m-> null[0m[0m

              [31m-[0m[0m grantee {
                  [31m-[0m[0m id   = "d773a14d2415344921f79724694cdc782c74253fc7f482a2f561ac0b3686830b" [90m-> null[0m[0m
                  [31m-[0m[0m type = "CanonicalUser" [90m-> null[0m[0m
                }
            }
          [31m-[0m[0m owner {
              [31m-[0m[0m id = "d773a14d2415344921f79724694cdc782c74253fc7f482a2f561ac0b3686830b" [90m-> null[0m[0m
            }
        }
    }

[1m  # module.cicd_infra.aws_security_group.codebuild_sg[0m will be [1m[31mdestroyed[0m
  # (because aws_security_group.codebuild_sg is not in configuration)
[0m  [31m-[0m[0m resource "aws_security_group" "codebuild_sg" {
      [31m-[0m[0m arn                    = "arn:aws:ec2:ap-south-1:986069063944:security-group/sg-0998fc217d4bc374f" [90m-> null[0m[0m
      [31m-[0m[0m description            = "Security group for codebuild" [90m-> null[0m[0m
      [31m-[0m[0m egress                 = [
          [31m-[0m[0m {
              [31m-[0m[0m cidr_blocks      = [
                  [31m-[0m[0m "0.0.0.0/0",
                ]
              [31m-[0m[0m description      = ""
              [31m-[0m[0m from_port        = 0
              [31m-[0m[0m ipv6_cidr_blocks = []
              [31m-[0m[0m prefix_list_ids  = []
              [31m-[0m[0m protocol         = "-1"
              [31m-[0m[0m security_groups  = []
              [31m-[0m[0m self             = false
              [31m-[0m[0m to_port          = 0
            },
        ] [90m-> null[0m[0m
      [31m-[0m[0m id                     = "sg-0998fc217d4bc374f" [90m-> null[0m[0m
      [31m-[0m[0m ingress                = [] [90m-> null[0m[0m
      [31m-[0m[0m name                   = "dev-career-hub-dataprovider-codebuild-sg" [90m-> null[0m[0m
      [31m-[0m[0m owner_id               = "986069063944" [90m-> null[0m[0m
      [31m-[0m[0m revoke_rules_on_delete = false [90m-> null[0m[0m
      [31m-[0m[0m tags                   = {} [90m-> null[0m[0m
      [31m-[0m[0m tags_all               = {
          [31m-[0m[0m "env" = "dev"
        } [90m-> null[0m[0m
      [31m-[0m[0m vpc_id                 = "vpc-06dcdb238d94e715e" [90m-> null[0m[0m
    }

[1m  # module.cicd_infra.aws_security_group_rule.allow_all_traffic[0m will be [1m[31mdestroyed[0m
  # (because aws_security_group_rule.allow_all_traffic is not in configuration)
[0m  [31m-[0m[0m resource "aws_security_group_rule" "allow_all_traffic" {
      [31m-[0m[0m cidr_blocks            = [
          [31m-[0m[0m "0.0.0.0/0",
        ] [90m-> null[0m[0m
      [31m-[0m[0m from_port              = 0 [90m-> null[0m[0m
      [31m-[0m[0m id                     = "sgrule-2922667764" [90m-> null[0m[0m
      [31m-[0m[0m protocol               = "-1" [90m-> null[0m[0m
      [31m-[0m[0m security_group_id      = "sg-0998fc217d4bc374f" [90m-> null[0m[0m
      [31m-[0m[0m security_group_rule_id = "sgr-0fac61bf3777895b7" [90m-> null[0m[0m
      [31m-[0m[0m self                   = false [90m-> null[0m[0m
      [31m-[0m[0m to_port                = 0 [90m-> null[0m[0m
      [31m-[0m[0m type                   = "egress" [90m-> null[0m[0m
    }

[1m  # module.dataprocessor_cicd.data.aws_iam_policy_document.codebuild_policy_doc[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "codebuild_policy_doc" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "logs:CreateLogGroup",
              [32m+[0m[0m "logs:CreateLogStream",
              [32m+[0m[0m "logs:PutLogEvents",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateNetworkInterface",
              [32m+[0m[0m "ec2:DeleteNetworkInterface",
              [32m+[0m[0m "ec2:DescribeDhcpOptions",
              [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
              [32m+[0m[0m "ec2:DescribeSecurityGroups",
              [32m+[0m[0m "ec2:DescribeSubnets",
              [32m+[0m[0m "ec2:DescribeVpcs",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateNetworkInterfacePermission",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:*:*:network-interface/*",
            ]

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ArnEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "arn:aws:ec2:ap-south-1:986069063944:subnet/subnet-0242237036f582ca7",
                ]
              [32m+[0m[0m variable = "ec2:Subnet"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "codebuild.amazonaws.com",
                ]
              [32m+[0m[0m variable = "ec2:AuthorizedService"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
              [32m+[0m[0m "ecr:CompleteLayerUpload",
              [32m+[0m[0m "ecr:GetAuthorizationToken",
              [32m+[0m[0m "ecr:InitiateLayerUpload",
              [32m+[0m[0m "ecr:PutImage",
              [32m+[0m[0m "ecr:UploadLayerPart",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:*",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:*",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
        }
    }

[1m  # module.dataprocessor_cicd.data.aws_iam_policy_document.codepipeline_policy_doc[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "codepipeline_policy_doc" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "codestar-connections:UseConnection",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "codebuild:BatchGetBuilds",
              [32m+[0m[0m "codebuild:StartBuild",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:GetBucketVersioning",
              [32m+[0m[0m "s3:GetObject",
              [32m+[0m[0m "s3:GetObjectVersion",
              [32m+[0m[0m "s3:PutObject",
              [32m+[0m[0m "s3:PutObjectAcl",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
        }
    }

[1m  # module.dataprocessor_cicd.aws_codebuild_project.codebuild_project[0m will be created
[0m  [32m+[0m[0m resource "aws_codebuild_project" "codebuild_project" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m badge_enabled        = false
      [32m+[0m[0m badge_url            = (known after apply)
      [32m+[0m[0m build_timeout        = 30
      [32m+[0m[0m description          = "CodeBuild for dev-career-hub-dataprocessor"
      [32m+[0m[0m encryption_key       = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m name                 = "dev-career-hub-dataprocessor-codebuild"
      [32m+[0m[0m project_visibility   = "PRIVATE"
      [32m+[0m[0m public_project_alias = (known after apply)
      [32m+[0m[0m queued_timeout       = 480
      [32m+[0m[0m service_role         = (known after apply)
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "env" = "dev"
        }

      [32m+[0m[0m artifacts {
          [32m+[0m[0m encryption_disabled    = false
          [32m+[0m[0m override_artifact_name = false
          [32m+[0m[0m type                   = "CODEPIPELINE"
        }

      [32m+[0m[0m cache {
          [32m+[0m[0m location = "dev-career-hub-dataprocessor-codebuild-log"
          [32m+[0m[0m type     = "S3"
        }

      [32m+[0m[0m environment {
          [32m+[0m[0m compute_type                = "BUILD_GENERAL1_SMALL"
          [32m+[0m[0m image                       = "aws/codebuild/amazonlinux2-x86_64-standard:4.0"
          [32m+[0m[0m image_pull_credentials_type = "CODEBUILD"
          [32m+[0m[0m privileged_mode             = true
          [32m+[0m[0m type                        = "LINUX_CONTAINER"
        }

      [32m+[0m[0m logs_config {
          [32m+[0m[0m cloudwatch_logs {
              [32m+[0m[0m group_name  = "dev-career-hub-dataprocessor-lg"
              [32m+[0m[0m status      = "ENABLED"
              [32m+[0m[0m stream_name = "dev-career-hub-dataprocessor-ls"
            }
          [32m+[0m[0m s3_logs {
              [32m+[0m[0m encryption_disabled = false
              [32m+[0m[0m location            = (known after apply)
              [32m+[0m[0m status              = "ENABLED"
            }
        }

      [32m+[0m[0m source {
          [32m+[0m[0m buildspec = <<-EOT
                version: 0.2
                
                phases:
                  pre_build:
                    commands:
                      - echo Logging in to Amazon ECR...
                      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 986069063944.dkr.ecr.ap-south-1.amazonaws.com
                  build:
                    commands:
                      - echo Build started on `date`
                      - echo Building the Docker image...
                      - docker build -t dev-career-hub-dataprocessor-ecr:latest .
                      - docker tag dev-career-hub-dataprocessor-ecr:latest 986069063944.dkr.ecr.ap-south-1.amazonaws.com/dev-career-hub-dataprocessor-ecr:latest
                
                  post_build:
                    commands:
                      - echo Build completed on `date`
                      - echo Pushing the Docker image...
                      - docker push 986069063944.dkr.ecr.ap-south-1.amazonaws.com/dev-career-hub-dataprocessor-ecr:latest
            EOT
          [32m+[0m[0m type      = "CODEPIPELINE"
        }

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m security_group_ids = (known after apply)
          [32m+[0m[0m subnets            = [
              [32m+[0m[0m "subnet-0242237036f582ca7",
            ]
          [32m+[0m[0m vpc_id             = "vpc-06dcdb238d94e715e"
        }
    }

[1m  # module.dataprocessor_cicd.aws_codepipeline.codepipeline[0m will be created
[0m  [32m+[0m[0m resource "aws_codepipeline" "codepipeline" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m name     = "dev-career-hub-dataprocessor-codepipeline"
      [32m+[0m[0m role_arn = (known after apply)
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "env" = "dev"
        }

      [32m+[0m[0m artifact_store {
          [32m+[0m[0m location = "dev-career-hub-dataprocessor-codepipeline-bucket"
          [32m+[0m[0m region   = (known after apply)
          [32m+[0m[0m type     = "S3"
        }

      [32m+[0m[0m stage {
          [32m+[0m[0m name = "Source"

          [32m+[0m[0m action {
              [32m+[0m[0m category         = "Source"
              [32m+[0m[0m configuration    = (known after apply)
              [32m+[0m[0m name             = "Source"
              [32m+[0m[0m output_artifacts = [
                  [32m+[0m[0m "source_output",
                ]
              [32m+[0m[0m owner            = "AWS"
              [32m+[0m[0m provider         = "CodeStarSourceConnection"
              [32m+[0m[0m region           = (known after apply)
              [32m+[0m[0m run_order        = (known after apply)
              [32m+[0m[0m version          = "1"
            }
        }
      [32m+[0m[0m stage {
          [32m+[0m[0m name = "Build"

          [32m+[0m[0m action {
              [32m+[0m[0m category         = "Build"
              [32m+[0m[0m configuration    = {
                  [32m+[0m[0m "ProjectName" = "dev-career-hub-dataprocessor-codebuild"
                }
              [32m+[0m[0m input_artifacts  = [
                  [32m+[0m[0m "source_output",
                ]
              [32m+[0m[0m name             = "Build"
              [32m+[0m[0m output_artifacts = [
                  [32m+[0m[0m "build_output",
                ]
              [32m+[0m[0m owner            = "AWS"
              [32m+[0m[0m provider         = "CodeBuild"
              [32m+[0m[0m region           = (known after apply)
              [32m+[0m[0m run_order        = (known after apply)
              [32m+[0m[0m version          = "1"
            }
        }
    }

[1m  # module.dataprocessor_cicd.aws_codestarconnections_connection.codepipeline_connection[0m will be created
[0m  [32m+[0m[0m resource "aws_codestarconnections_connection" "codepipeline_connection" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m connection_status = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "dev-career-hub-dataprocessor-conn"
      [32m+[0m[0m provider_type     = "GitHub"
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "env" = "dev"
        }
    }

[1m  # module.dataprocessor_cicd.aws_ecr_repository.ecr_repo[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "ecr_repo" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "dev-career-hub-dataprocessor-ecr"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "env" = "dev"
        }
    }

[1m  # module.dataprocessor_cicd.aws_iam_role.codebuild_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "codebuild_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "codebuild.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev-career-hub-dataprocessor-codebuild-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "env" = "dev"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.dataprocessor_cicd.aws_iam_role.codepipeline_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "codepipeline_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "codepipeline.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev-career-hub-dataprocessor-codepipeline-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "env" = "dev"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.dataprocessor_cicd.aws_iam_role_policy.codebuild_role_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "codebuild_role_policy" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m name   = (known after apply)
      [32m+[0m[0m policy = (known after apply)
      [32m+[0m[0m role   = "dev-career-hub-dataprocessor-codebuild-role"
    }

[1m  # module.dataprocessor_cicd.aws_iam_role_policy.codepipeline_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "codepipeline_policy" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m name   = "codepipeline_policy"
      [32m+[0m[0m policy = (known after apply)
      [32m+[0m[0m role   = (known after apply)
    }

[1m  # module.dataprocessor_cicd.aws_s3_bucket.codebuild_log_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "codebuild_log_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "dev-career-hub-dataprocessor-codebuild-log"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "env" = "dev"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.dataprocessor_cicd.aws_s3_bucket.codepipeline_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "codepipeline_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "dev-career-hub-dataprocessor-codepipeline-bucket"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "env" = "dev"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.dataprocessor_cicd.aws_s3_bucket_acl.codebuild_log_bucket_acl[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_acl" "codebuild_log_bucket_acl" {
      [32m+[0m[0m acl    = "private"
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
    }

[1m  # module.dataprocessor_cicd.aws_security_group.codebuild_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "codebuild_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for codebuild"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "dev-career-hub-dataprocessor-codebuild-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "env" = "dev"
        }
      [32m+[0m[0m vpc_id                 = "vpc-06dcdb238d94e715e"
    }

[1m  # module.dataprocessor_cicd.aws_security_group_rule.allow_all_traffic[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "allow_all_traffic" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.dataprovider_cicd.data.aws_iam_policy_document.codebuild_policy_doc[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "codebuild_policy_doc" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "logs:CreateLogGroup",
              [32m+[0m[0m "logs:CreateLogStream",
              [32m+[0m[0m "logs:PutLogEvents",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateNetworkInterface",
              [32m+[0m[0m "ec2:DeleteNetworkInterface",
              [32m+[0m[0m "ec2:DescribeDhcpOptions",
              [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
              [32m+[0m[0m "ec2:DescribeSecurityGroups",
              [32m+[0m[0m "ec2:DescribeSubnets",
              [32m+[0m[0m "ec2:DescribeVpcs",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ec2:CreateNetworkInterfacePermission",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "arn:aws:ec2:*:*:network-interface/*",
            ]

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "ArnEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "arn:aws:ec2:ap-south-1:986069063944:subnet/subnet-0242237036f582ca7",
                ]
              [32m+[0m[0m variable = "ec2:Subnet"
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "codebuild.amazonaws.com",
                ]
              [32m+[0m[0m variable = "ec2:AuthorizedService"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "ecr:BatchCheckLayerAvailability",
              [32m+[0m[0m "ecr:CompleteLayerUpload",
              [32m+[0m[0m "ecr:GetAuthorizationToken",
              [32m+[0m[0m "ecr:InitiateLayerUpload",
              [32m+[0m[0m "ecr:PutImage",
              [32m+[0m[0m "ecr:UploadLayerPart",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:*",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:*",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
        }
    }

[1m  # module.dataprovider_cicd.data.aws_iam_policy_document.codepipeline_policy_doc[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "codepipeline_policy_doc" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "codestar-connections:UseConnection",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "codebuild:BatchGetBuilds",
              [32m+[0m[0m "codebuild:StartBuild",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "s3:GetBucketVersioning",
              [32m+[0m[0m "s3:GetObject",
              [32m+[0m[0m "s3:GetObjectVersion",
              [32m+[0m[0m "s3:PutObject",
              [32m+[0m[0m "s3:PutObjectAcl",
            ]
          [32m+[0m[0m effect    = "Allow"
          [32m+[0m[0m resources = [
              [32m+[0m[0m (known after apply),
              [32m+[0m[0m (known after apply),
            ]
        }
    }

[1m  # module.dataprovider_cicd.aws_codebuild_project.codebuild_project[0m will be created
[0m  [32m+[0m[0m resource "aws_codebuild_project" "codebuild_project" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m badge_enabled        = false
      [32m+[0m[0m badge_url            = (known after apply)
      [32m+[0m[0m build_timeout        = 30
      [32m+[0m[0m description          = "CodeBuild for dev-career-hub-dataprovider"
      [32m+[0m[0m encryption_key       = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m name                 = "dev-career-hub-dataprovider-codebuild"
      [32m+[0m[0m project_visibility   = "PRIVATE"
      [32m+[0m[0m public_project_alias = (known after apply)
      [32m+[0m[0m queued_timeout       = 480
      [32m+[0m[0m service_role         = (known after apply)
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "env" = "dev"
        }

      [32m+[0m[0m artifacts {
          [32m+[0m[0m encryption_disabled    = false
          [32m+[0m[0m override_artifact_name = false
          [32m+[0m[0m type                   = "CODEPIPELINE"
        }

      [32m+[0m[0m cache {
          [32m+[0m[0m location = "dev-career-hub-dataprovider-codebuild-log"
          [32m+[0m[0m type     = "S3"
        }

      [32m+[0m[0m environment {
          [32m+[0m[0m compute_type                = "BUILD_GENERAL1_SMALL"
          [32m+[0m[0m image                       = "aws/codebuild/amazonlinux2-x86_64-standard:4.0"
          [32m+[0m[0m image_pull_credentials_type = "CODEBUILD"
          [32m+[0m[0m privileged_mode             = true
          [32m+[0m[0m type                        = "LINUX_CONTAINER"
        }

      [32m+[0m[0m logs_config {
          [32m+[0m[0m cloudwatch_logs {
              [32m+[0m[0m group_name  = "dev-career-hub-dataprovider-lg"
              [32m+[0m[0m status      = "ENABLED"
              [32m+[0m[0m stream_name = "dev-career-hub-dataprovider-ls"
            }
          [32m+[0m[0m s3_logs {
              [32m+[0m[0m encryption_disabled = false
              [32m+[0m[0m location            = (known after apply)
              [32m+[0m[0m status              = "ENABLED"
            }
        }

      [32m+[0m[0m source {
          [32m+[0m[0m buildspec = <<-EOT
                version: 0.2
                
                phases:
                  pre_build:
                    commands:
                      - echo Logging in to Amazon ECR...
                      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 986069063944.dkr.ecr.ap-south-1.amazonaws.com
                  build:
                    commands:
                      - echo Build started on `date`
                      - echo Building the Docker image...
                      - docker build -t dev-career-hub-dataprovider-ecr:latest .
                      - docker tag dev-career-hub-dataprovider-ecr:latest 986069063944.dkr.ecr.ap-south-1.amazonaws.com/dev-career-hub-dataprovider-ecr:latest
                
                  post_build:
                    commands:
                      - echo Build completed on `date`
                      - echo Pushing the Docker image...
                      - docker push 986069063944.dkr.ecr.ap-south-1.amazonaws.com/dev-career-hub-dataprovider-ecr:latest
            EOT
          [32m+[0m[0m type      = "CODEPIPELINE"
        }

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m security_group_ids = (known after apply)
          [32m+[0m[0m subnets            = [
              [32m+[0m[0m "subnet-0242237036f582ca7",
            ]
          [32m+[0m[0m vpc_id             = "vpc-06dcdb238d94e715e"
        }
    }

[1m  # module.dataprovider_cicd.aws_codepipeline.codepipeline[0m will be created
[0m  [32m+[0m[0m resource "aws_codepipeline" "codepipeline" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m name     = "dev-career-hub-dataprovider-codepipeline"
      [32m+[0m[0m role_arn = (known after apply)
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "env" = "dev"
        }

      [32m+[0m[0m artifact_store {
          [32m+[0m[0m location = "dev-career-hub-dataprovider-codepipeline-bucket"
          [32m+[0m[0m region   = (known after apply)
          [32m+[0m[0m type     = "S3"
        }

      [32m+[0m[0m stage {
          [32m+[0m[0m name = "Source"

          [32m+[0m[0m action {
              [32m+[0m[0m category         = "Source"
              [32m+[0m[0m configuration    = (known after apply)
              [32m+[0m[0m name             = "Source"
              [32m+[0m[0m output_artifacts = [
                  [32m+[0m[0m "source_output",
                ]
              [32m+[0m[0m owner            = "AWS"
              [32m+[0m[0m provider         = "CodeStarSourceConnection"
              [32m+[0m[0m region           = (known after apply)
              [32m+[0m[0m run_order        = (known after apply)
              [32m+[0m[0m version          = "1"
            }
        }
      [32m+[0m[0m stage {
          [32m+[0m[0m name = "Build"

          [32m+[0m[0m action {
              [32m+[0m[0m category         = "Build"
              [32m+[0m[0m configuration    = {
                  [32m+[0m[0m "ProjectName" = "dev-career-hub-dataprovider-codebuild"
                }
              [32m+[0m[0m input_artifacts  = [
                  [32m+[0m[0m "source_output",
                ]
              [32m+[0m[0m name             = "Build"
              [32m+[0m[0m output_artifacts = [
                  [32m+[0m[0m "build_output",
                ]
              [32m+[0m[0m owner            = "AWS"
              [32m+[0m[0m provider         = "CodeBuild"
              [32m+[0m[0m region           = (known after apply)
              [32m+[0m[0m run_order        = (known after apply)
              [32m+[0m[0m version          = "1"
            }
        }
    }

[1m  # module.dataprovider_cicd.aws_codestarconnections_connection.codepipeline_connection[0m will be created
[0m  [32m+[0m[0m resource "aws_codestarconnections_connection" "codepipeline_connection" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m connection_status = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m name              = "dev-career-hub-dataprovider-conn"
      [32m+[0m[0m provider_type     = "GitHub"
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "env" = "dev"
        }
    }

[1m  # module.dataprovider_cicd.aws_ecr_repository.ecr_repo[0m will be created
[0m  [32m+[0m[0m resource "aws_ecr_repository" "ecr_repo" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m image_tag_mutability = "MUTABLE"
      [32m+[0m[0m name                 = "dev-career-hub-dataprovider-ecr"
      [32m+[0m[0m registry_id          = (known after apply)
      [32m+[0m[0m repository_url       = (known after apply)
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "env" = "dev"
        }
    }

[1m  # module.dataprovider_cicd.aws_iam_role.codebuild_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "codebuild_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "codebuild.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev-career-hub-dataprovider-codebuild-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "env" = "dev"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.dataprovider_cicd.aws_iam_role.codepipeline_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "codepipeline_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "codepipeline.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "dev-career-hub-dataprovider-codepipeline-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "env" = "dev"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.dataprovider_cicd.aws_iam_role_policy.codebuild_role_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "codebuild_role_policy" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m name   = (known after apply)
      [32m+[0m[0m policy = (known after apply)
      [32m+[0m[0m role   = "dev-career-hub-dataprovider-codebuild-role"
    }

[1m  # module.dataprovider_cicd.aws_iam_role_policy.codepipeline_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "codepipeline_policy" {
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m name   = "codepipeline_policy"
      [32m+[0m[0m policy = (known after apply)
      [32m+[0m[0m role   = (known after apply)
    }

[1m  # module.dataprovider_cicd.aws_s3_bucket.codebuild_log_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "codebuild_log_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "dev-career-hub-dataprovider-codebuild-log"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "env" = "dev"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.dataprovider_cicd.aws_s3_bucket.codepipeline_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "codepipeline_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "dev-career-hub-dataprovider-codepipeline-bucket"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "env" = "dev"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)
    }

[1m  # module.dataprovider_cicd.aws_s3_bucket_acl.codebuild_log_bucket_acl[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_acl" "codebuild_log_bucket_acl" {
      [32m+[0m[0m acl    = "private"
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
    }

[1m  # module.dataprovider_cicd.aws_security_group.codebuild_sg[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "codebuild_sg" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Security group for codebuild"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = "dev-career-hub-dataprovider-codebuild-sg"
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "env" = "dev"
        }
      [32m+[0m[0m vpc_id                 = "vpc-06dcdb238d94e715e"
    }

[1m  # module.dataprovider_cicd.aws_security_group_rule.allow_all_traffic[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "allow_all_traffic" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1mPlan:[0m 26 to add, 0 to change, 13 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m dataprocessor_ecr           = "986069063944.dkr.ecr.ap-south-1.amazonaws.com/dev-career-hub-dataprocessor-ecr"
  [32m+[0m[0m dataprovider_ecr            = "986069063944.dkr.ecr.ap-south-1.amazonaws.com/dev-career-hub-dataprovider-ecr"
  [32m+[0m[0m jobposting_mongodb_endpoint = "mongodb+srv://dev-career-hub-jobposting-pe-0.bkdbcua.mongodb.net"
  [32m+[0m[0m log_mongodb_endpoint        = "mongodb+srv://dev-career-hub-log-pe-0.njfu5gu.mongodb.net"
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
